import {serveDir, serveFile, type ServeDirOptions} from '@std/http/file-server';
import * as path from '@std/path'
import {Forager} from '@forager/core'
import {Logger, type LogLevel} from '@forager/core/logger'

// these relative imports are generated by the adapter in the build step
import {kitServer} from './server.js';
import {load_config} from './config.ts'

import deno_json from './deno.json' with { type: 'json' }

interface ServerOptions {
  // the port the server is hosted on
  port?: number
}

class Server {
  #server?: Deno.HttpServer
  #prerendered: Set<string>
  #appDir: string
  #baseDir: string
  #rootDir: string
  #kitServerInitialized!: Promise<void>
  #serve_dir_options: ServeDirOptions

  constructor(options: ServerOptions) {
    this.#logger = new Logger('forager.web', options?.log_level)
    this.#options = options ?? {}
    this.#prerendered = new Set(PRERENDERED);
    this.#appDir = 'APP_DIR';
    this.#baseDir = path.dirname(new URL(import.meta.url).pathname);
    this.#rootDir = path.join(this.#baseDir, 'static');
    this.#serve_dir_options = {
      fsRoot: this.#rootDir,
      quiet: this.#options.log_level !== 'DEBUG',
    }
  }

  async init() {
    this.#kitServerInitialized = kitServer.init({ env:{} })
    await this.#kitServerInitialized
  }

  start(): Promise<void> {
    this.#server = Deno.serve({
      port: this.#options.port ?? 8000,
      onError: (error) => {
        this.#logger.error(`An error occured on the server: ${error}`)
        return new Response('Internal Error', {status: 500})
      },
      onListen: (addr) => {
        this.#logger.info(`Listening on ${addr.hostname}:${addr.port}`)
        this.#logger.debug(`@forager/web version ${deno_json.version}`)
        this.#logger.debug(`static assets served from ${this.#rootDir}`)
      },
    }, this.#handle_request)
    return this.#server.finished
  }

  get status(): Promise<void> | undefined {
    return this.#server?.finished
  }

  async shutdown() {
    if (this.#server === undefined) {
      throw new Error("Server has not been started yet")
    }
    await this.#server.shutdown()
  }

  #handle_request = async (request: Request, info: Deno.ServeHandlerInfo): Promise<Response> => {
    this.#logger.debug(() => {
      const endpoint = `${request.method} ${request.url}`
      return endpoint
      /*
      const headers = `${[...request.headers.entries()].map(entry => `  ${entry[0]}: ${entry[1]}`).join('\n')}`
      return `${endpoint}\n${headers}`
      */
    })

    const url = new URL(request.url)

    // Try static files (ignore redirects and errors)
    const response = await serveDir(request, this.#serve_dir_options)
    if (response.ok || response.status === 304) {
      if (this.#routes.immutable_asset.test(url)) {
        response.headers.set('cache-control', 'public, max-age=31536000, immutable')
      }
      return response
    }

    // Pass to the SvelteKit server
    await this.#kitServerInitialized
    return kitServer.respond(request, {
      getClientAddress() {
        // Get client IP address
        return request.headers.get('x-forwarded-for') ?? info.remoteAddr.hostname;
      }
    });
  }
}


if (import.meta.main) {
  await server.init()
  await server.start()
}


export { Server }

